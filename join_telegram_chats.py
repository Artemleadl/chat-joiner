import os
import asyncio
import re
import random
from datetime import datetime
import sqlite3
from telethon import TelegramClient
from telethon.errors import FloodWaitError, ChatAdminRequiredError, UsernameInvalidError, UsernameNotOccupiedError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
API_ID = 20723031
API_HASH = '05f59ebab48ab890899a8aa5b4b8626d'
PHONE = '+17656617177'

ERROR_LOG_FILE = 'errors.log'
DB_FILE = 'chats.db'

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY,
            title TEXT,
            username TEXT,
            chat_type TEXT,
            date_added TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_chat_to_db(chat_id, title, username, chat_type):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        INSERT OR IGNORE INTO chats (id, title, username, chat_type, date_added)
        VALUES (?, ?, ?, ?, ?)
    ''', (chat_id, title, username, chat_type, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ ---
def log_error(chat, reason, details=None):
    with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"[{now}] –ß–∞—Ç: {chat} | –ü—Ä–∏—á–∏–Ω–∞: {reason}\n")
        if details:
            f.write(f"    –î–µ—Ç–∞–ª–∏: {details}\n")

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ ---
def normalize_chat_link(link):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã Telegram
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - https://t.me/chatname
    - t.me/chatname
    - @chatname
    - chatname
    - https://telegram.me/chatname
    - telegram.me/chatname
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
    link = link.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @, –¥–æ–±–∞–≤–ª—è–µ–º @
    if not any(char in link for char in ['/', '@', 'http']):
        link = '@' + link
    
    # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if link.startswith('@'):
        link = link[1:]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
    if 'http' in link or 't.me' in link or 'telegram.me' in link:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
        match = re.search(r'(?:t\.me|telegram\.me)/([^/]+)', link)
        if match:
            link = match.group(1)
    
    return link

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ ---
def is_chat_in_db(chatname):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
    c.execute('SELECT 1 FROM chats WHERE username = ?', (chatname,))
    result = c.fetchone()
    conn.close()
    return result is not None

# --- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (30-40 —Å–µ–∫—É–Ω–¥) ---
async def adaptive_sleep(base=30, max_extra=10):
    delay = base + random.uniform(0, max_extra)
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —á–∞—Ç–æ–º...")
    await asyncio.sleep(delay)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É ---
async def save_all_chats_to_db(client):
    print("üì• –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –æ —á–∞—Ç–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    chats = []
    last_date = None
    chunk_size = 200
    has_more = True
    offset_id = 0
    while has_more:
        result = await client(GetDialogsRequest(
            offset_date=last_date,
            offset_id=offset_id,
            offset_peer=InputPeerEmpty(),
            limit=chunk_size,
            hash=0
        ))
        chats.extend(result.chats)
        if not result.chats or len(result.chats) < chunk_size:
            has_more = False
        else:
            offset_id = result.chats[-1].id
    for chat in chats:
        title = getattr(chat, 'title', None)
        username = getattr(chat, 'username', None)
        chat_type = type(chat).__name__
        save_chat_to_db(chat.id, title, username, chat_type)
    print(f"‚úÖ –í –±–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø.")

# --- –í—ã–≤–æ–¥ –ª–∏–º–∏—Ç–æ–≤ ---
async def print_chat_limits(client):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
    chats = []
    last_date = None
    chunk_size = 200
    has_more = True
    offset_id = 0
    while has_more:
        result = await client(GetDialogsRequest(
            offset_date=last_date,
            offset_id=offset_id,
            offset_peer=InputPeerEmpty(),
            limit=chunk_size,
            hash=0
        ))
        chats.extend(result.chats)
        if not result.chats or len(result.chats) < chunk_size:
            has_more = False
        else:
            offset_id = result.chats[-1].id
    print(f"\n‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ {len(chats)} —á–∞—Ç–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö.")
    print("–õ–∏–º–∏—Ç—ã Telegram:")
    print("  ‚Ä¢ –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –¥–æ 500 —á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤")
    print("  ‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç: –¥–æ 1000 —á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤\n")

# --- –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ---
async def join_chat(client, chat_link, flood_delay=0):
    try:
        normalized_link = normalize_chat_link(chat_link)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if is_chat_in_db(normalized_link):
            print(f"‚è© –£–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ: {normalized_link}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
            return
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É: {normalized_link}")
        await client(JoinChannelRequest(normalized_link))
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É: {normalized_link}")
        await adaptive_sleep()
    except FloodWaitError as e:
        wait_time = e.seconds + flood_delay
        print(f"‚ö†Ô∏è FloodWait! –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
        log_error(normalized_link, f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥", str(e))
        await asyncio.sleep(wait_time)
        await join_chat(client, chat_link, flood_delay + 5)
    except ChatAdminRequiredError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É {normalized_link}: —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        log_error(normalized_link, "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", str(e))
    except UsernameInvalidError as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {normalized_link}")
        log_error(normalized_link, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", str(e))
    except UsernameNotOccupiedError as e:
        print(f"‚ùå –ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {normalized_link}")
        log_error(normalized_link, "–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", str(e))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É {normalized_link}: {str(e)}")
        log_error(normalized_link, "–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞", str(e))
        await adaptive_sleep()

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π ---
async def main():
    init_db()
    # –°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    chat_links = [
        "@zhukova_soza",
        "@boldiching",
        "@bypanica",
        "@cogachat",
        "@Fenomenlichnosti",
        "@gadeckymarafon",
        "@luck_will",
        "@misliletopischat"
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    client = TelegramClient('session_name', API_ID, API_HASH)
    
    try:
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await client.start(phone=PHONE)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram")
        await print_chat_limits(client)
        await save_all_chats_to_db(client)
        for chat_link in chat_links:
            await join_chat(client, chat_link)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        await print_chat_limits(client)
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        await save_all_chats_to_db(client)
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await client.disconnect()
        print("üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")

if __name__ == '__main__':
    asyncio.run(main()) 