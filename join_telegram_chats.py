import os
import asyncio
import re
import random
import time
from datetime import datetime
import sqlite3
from telethon import TelegramClient
from telethon.errors import FloodWaitError, ChatAdminRequiredError, UsernameInvalidError, UsernameNotOccupiedError
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.functions.messages import GetDialogsRequest, GetHistoryRequest, AddReactionRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.tl.types import InputPeerEmpty, InputMessageID, ReactionEmoji
from delay_manager import DelayManager
from account_manager import AccountManager

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
API_ID = 20723031
API_HASH = '05f59ebab48ab890899a8aa5b4b8626d'
PHONE = '+17656617177'

ERROR_LOG_FILE = 'errors.log'
DB_FILE = 'chats.db'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
delay_manager = DelayManager(base_delay=30, max_extra=10)
account_manager = AccountManager()

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS chats (
            id INTEGER PRIMARY KEY,
            title TEXT,
            username TEXT,
            chat_type TEXT,
            date_added TEXT
        )
    ''')
    conn.commit()
    conn.close()

def save_chat_to_db(chat_id, title, username, chat_type):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        INSERT OR IGNORE INTO chats (id, title, username, chat_type, date_added)
        VALUES (?, ?, ?, ?, ?)
    ''', (chat_id, title, username, chat_type, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()
    conn.close()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ ---
def log_error(chat, reason, details=None):
    with open(ERROR_LOG_FILE, 'a', encoding='utf-8') as f:
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        f.write(f"[{now}] –ß–∞—Ç: {chat} | –ü—Ä–∏—á–∏–Ω–∞: {reason}\n")
        if details:
            f.write(f"    –î–µ—Ç–∞–ª–∏: {details}\n")

# --- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ ---
def normalize_chat_link(link):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã Telegram
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
    - https://t.me/chatname
    - t.me/chatname
    - @chatname
    - chatname
    - https://telegram.me/chatname
    - telegram.me/chatname
    - https://t.me/joinchat/XXXX
    - https://t.me/+XXXX
    """
    link = link.strip()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É
    invite_match = re.search(r'(?:t\.me/(joinchat/|\+)|telegram\.me/(joinchat/|\+))([\w-]+)', link)
    if invite_match:
        return {'type': 'invite', 'hash': invite_match.group(3)}
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @, –¥–æ–±–∞–≤–ª—è–µ–º @
    if not any(char in link for char in ['/', '@', 'http']):
        link = '@' + link
    # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if link.startswith('@'):
        link = link[1:]
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ URL
    if 'http' in link or 't.me' in link or 'telegram.me' in link:
        match = re.search(r'(?:t\.me|telegram\.me)/([^/]+)', link)
        if match:
            link = match.group(1)
    return {'type': 'username', 'username': link}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ ---
def is_chat_in_db(chatname):
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
    c.execute('SELECT 1 FROM chats WHERE username = ?', (chatname,))
    result = c.fetchone()
    conn.close()
    return result is not None

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É ---
async def save_all_chats_to_db(client):
    print("üì• –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –æ —á–∞—Ç–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    chats = []
    last_date = None
    chunk_size = 200
    has_more = True
    offset_id = 0
    while has_more:
        result = await client(GetDialogsRequest(
            offset_date=last_date,
            offset_id=offset_id,
            offset_peer=InputPeerEmpty(),
            limit=chunk_size,
            hash=0
        ))
        chats.extend(result.chats)
        if not result.chats or len(result.chats) < chunk_size:
            has_more = False
        else:
            offset_id = result.chats[-1].id
    for chat in chats:
        title = getattr(chat, 'title', None)
        username = getattr(chat, 'username', None)
        chat_type = type(chat).__name__
        save_chat_to_db(chat.id, title, username, chat_type)
    print(f"‚úÖ –í –±–∞–∑—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø.")

# --- –í—ã–≤–æ–¥ –ª–∏–º–∏—Ç–æ–≤ ---
async def print_chat_limits(client):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
    chats = []
    last_date = None
    chunk_size = 200
    has_more = True
    offset_id = 0
    while has_more:
        result = await client(GetDialogsRequest(
            offset_date=last_date,
            offset_id=offset_id,
            offset_peer=InputPeerEmpty(),
            limit=chunk_size,
            hash=0
        ))
        chats.extend(result.chats)
        if not result.chats or len(result.chats) < chunk_size:
            has_more = False
        else:
            offset_id = result.chats[-1].id
    print(f"\n‚ÑπÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ {len(chats)} —á–∞—Ç–∞—Ö/–∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö.")
    print("–õ–∏–º–∏—Ç—ã Telegram:")
    print("  ‚Ä¢ –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: –¥–æ 500 —á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤")
    print("  ‚Ä¢ –ü—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç: –¥–æ 1000 —á–∞—Ç–æ–≤/–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤\n")

# --- –≠–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def emulate_human_activity(client):
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–æ–≤, —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–µ–∞–∫—Ü–∏–∏.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        dialogs = await client(GetDialogsRequest(
            offset_date=None,
            offset_id=0,
            offset_peer=InputPeerEmpty(),
            limit=50,
            hash=0
        ))
        chats = [d for d in dialogs.chats if hasattr(d, 'id')]
        if not chats:
            return
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç
        chat = random.choice(chats)
        print(f"ü§ñ –≠–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞—Ç–∞ {getattr(chat, 'title', chat.id)}")
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        history = await client(GetHistoryRequest(
            peer=chat,
            offset_id=0,
            offset_date=None,
            add_offset=0,
            limit=50,
            max_id=0,
            min_id=0,
            hash=0
        ))
        messages = [m for m in history.messages if hasattr(m, 'id')]
        if messages:
            # –ß–∏—Ç–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in random.sample(messages, min(3, len(messages))):
                print(f"  üëÅÔ∏è –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}")
                # –ü—Ä–æ–±—É–µ–º –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é (–ª–∞–π–∫)
                try:
                    await client(AddReactionRequest(
                        peer=chat,
                        id=[msg.id],
                        reaction=[ReactionEmoji(emoticon='üëç')],
                        big=True
                    ))
                    print(f"  üëç –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")
                except Exception:
                    pass
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

# --- –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π ---
async def join_chat(client, chat_link, account):
    try:
        normalized = normalize_chat_link(chat_link)
        if normalized['type'] == 'invite':
            chat_id = normalized['hash']
            if is_chat_in_db(chat_id):
                print(f"‚è© –£–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ (–∏–Ω–≤–∞–π—Ç): {chat_id}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                account_manager.mark_join(account, chat_id, success=False, error_message="Already joined (invite)")
                return True
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {chat_id}")
            await client(ImportChatInviteRequest(chat_id))
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {chat_id}")
            account_manager.mark_join(account, chat_id, success=True)
            await delay_manager.adaptive_sleep()
            # –ò–Ω–æ–≥–¥–∞ —ç–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if random.random() < 0.2:
                await emulate_human_activity(client)
            return True
        else:
            chatname = normalized['username']
            if is_chat_in_db(chatname):
                print(f"‚è© –£–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —á–∞—Ç–µ: {chatname}, –ø—Ä–æ–ø—É—Å–∫–∞—é...")
                account_manager.mark_join(account, chatname, success=False, error_message="Already joined")
                return True
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É: {chatname}")
            await client(JoinChannelRequest(chatname))
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É: {chatname}")
            account_manager.mark_join(account, chatname, success=True)
            await delay_manager.adaptive_sleep()
            # –ò–Ω–æ–≥–¥–∞ —ç–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if random.random() < 0.2:
                await emulate_human_activity(client)
            return True
    except FloodWaitError as e:
        wait_time = e.seconds
        print(f"‚ö†Ô∏è FloodWait! –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
        log_error(chat_link, f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥", str(e))
        account_manager.mark_join(account, chat_link, success=False, error_message=f"FloodWait: {wait_time}s")
        account_manager.mark_account_flood_wait(account, wait_time)
        # –ü–æ—Å–ª–µ FloodWait –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await emulate_human_activity(client)
        return False
    except ChatAdminRequiredError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É {chat_link}: —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        log_error(chat_link, "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", str(e))
        account_manager.mark_join(account, chat_link, success=False, error_message="Admin approval required")
        return True
    except UsernameInvalidError as e:
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_link}")
        log_error(chat_link, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", str(e))
        account_manager.mark_join(account, chat_link, success=False, error_message="Invalid username")
        return True
    except UsernameNotOccupiedError as e:
        print(f"‚ùå –ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chat_link}")
        log_error(chat_link, "–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", str(e))
        account_manager.mark_join(account, chat_link, success=False, error_message="Chat doesn't exist")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É {chat_link}: {str(e)}")
        log_error(chat_link, "–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞", str(e))
        account_manager.mark_join(account, chat_link, success=False, error_message=str(e))
        await delay_manager.adaptive_sleep()
        return True

async def print_account_stats(account):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É"""
    stats = account_manager.get_account_stats(account)
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.phone}:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω—ã—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π: {stats['total_successful']}")
    print(f"  ‚Ä¢ –í—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['last_24h']}")
    print(f"  ‚Ä¢ –í—Å—Ç—É–ø–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats['last_hour']}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π ---
async def main():
    init_db()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with open('chat_list.txt', 'r', encoding='utf-8') as f:
        chat_links = [line.strip() for line in f if line.strip()]

    while chat_links:  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –ø–æ–∫–∞ –µ—Å—Ç—å —á–∞—Ç—ã –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = await account_manager.create_client()
        if not client:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª accounts.json")
            # –î–µ–ª–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(300)
            continue

        try:
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            await print_chat_limits(client)
            await save_all_chats_to_db(client)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            current_account = account_manager.accounts[account_manager.current_account_index]
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
            await print_account_stats(current_account)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            while chat_links and not account_manager.should_switch_account():
                chat_link = chat_links[0]
                success = await join_chat(client, chat_link, current_account)
                if success:
                    chat_links.pop(0)  # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å –∏–∑-–∑–∞ FloodWait, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç
                    break
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å —á–∞—Ç—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            if chat_links:
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç...")
                await client.disconnect()
                # –î–µ–ª–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
                switch_delay = random.uniform(30, 60)
                print(f"‚è≥ –ü–∞—É–∑–∞ {switch_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞...")
                await asyncio.sleep(switch_delay)
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            await client.disconnect()
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(random.uniform(60, 120))
        finally:
            await client.disconnect()
            print("üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram")

    print("‚úÖ –í—Å–µ —á–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

if __name__ == '__main__':
    asyncio.run(main()) 